import{g as E}from"./index-d741e8eb.js";function b(u,o){for(var a=0;a<o.length;a++){const r=o[a];if(typeof r!="string"&&!Array.isArray(r)){for(const g in r)if(g!=="default"&&!(g in u)){const c=Object.getOwnPropertyDescriptor(r,g);c&&Object.defineProperty(u,g,c.get?c:{enumerable:!0,get:()=>r[g]})}}}return Object.freeze(Object.defineProperty(u,Symbol.toStringTag,{value:"Module"}))}var k=u=>{for(let o=0;o<u.length;o++)if(u[o]==="�")return!1;return!0};const n="gi",i={czech:new RegExp(/jsem|jsi/,n),hungarian:new RegExp(/\snem\s/,n),slovak:new RegExp(/poriadku|myslím|\ssme\s/,n),slovenian:new RegExp(/\skaj\s|lahko|zdaj/,n),albanian:new RegExp(/nuk/,n),english:new RegExp(/ the /,n),french:new RegExp(/c'est/,n),portuguese:new RegExp(/ não /,n),spanish:new RegExp(/estaba|\smuy\s|siempre|ahora/,n),german:new RegExp(/\sdas\s/,n),italian:new RegExp(/\sche\s/,n),danish:new RegExp(/hvad|noget/,n),norwegian:new RegExp(/deg/,n),swedish:new RegExp(/ jag /,n),dutch:new RegExp(/ het /,n),finnish:new RegExp(/hän/,n),"serbo-croatian":new RegExp(/ sam | kako /,n),estonian:new RegExp(/\sseda\s|\spole\s|midagi/,n),icelandic:new RegExp(/Það/,n),"malay-indonesian":new RegExp(/tidak/,n),turkish:new RegExp(/ bir /,n),lithuanian:new RegExp(/taip|\stai\s/,n),bengali:new RegExp(/এটা/,n),hindi:new RegExp(/हैं/,n),urdu:new RegExp(/ایک/,n),vietnamese:new RegExp(/ không /,n)},e={polish:{low:.004355,high:.005102},czech:{low:.004433,high:.007324},hungarian:{low:.004994,high:.005183},romanian:{low:.003319,high:.00419},slovak:{low:.001736,high:.002557},slovenian:{low:.004111,high:.004959},albanian:{low:.003773,high:.007313},ukrainian:{low:.002933,high:.005389},english:{low:.004679,high:.00758},french:{low:.003016,high:.004825},portuguese:{low:.003406,high:.005032},spanish:{low:.002348,high:.002881},german:{low:.004044,high:.004391},italian:{low:.003889,high:.005175},danish:{low:.00363,high:.004189},norwegian:{low:.00241,high:.003918},swedish:{low:.004916,high:.007221},dutch:{low:.003501,high:.00415},finnish:{low:.003308,high:.005135},"serbo-croatian":{low:.002568,high:.005182},estonian:{low:.002892,high:.003963},icelandic:{low:.004366,high:.004366},"malay-indonesian":{low:.002825,high:.003932},greek:{low:.00344,high:.004862},turkish:{low:.002915,high:.004588},hebrew:{low:.003663,high:.004666},lithuanian:{low:.003277,high:.003768},bengali:{low:.003155,high:.005236},hindi:{low:.004159,high:.006478},urdu:{low:.004118,high:.005851},vietnamese:{low:.003387,high:.005191}};var C=[{name:"polish",count:0,utfRegex:new RegExp(/się/,n),isoRegex:new RegExp(/siê/,n),encoding:"CP1250",utfFrequency:e.polish,isoFrequency:e.polish},{name:"czech",count:0,utfRegex:i.czech,isoRegex:i.czech,encoding:"CP1250",utfFrequency:e.czech,isoFrequency:e.czech},{name:"hungarian",count:0,utfRegex:i.hungarian,isoRegex:i.hungarian,encoding:"CP1250",utfFrequency:e.hungarian,isoFrequency:e.hungarian},{name:"romanian",count:0,utfRegex:new RegExp(/sunt|eşti/,n),isoRegex:new RegExp(/sunt|eºti/,n),encoding:"CP1250",utfFrequency:e.romanian,isoFrequency:e.romanian},{name:"slovak",count:0,utfRegex:i.slovak,isoRegex:i.slovak,encoding:"CP1250",utfFrequency:e.slovak,isoFrequency:e.slovak},{name:"slovenian",count:0,utfRegex:i.slovenian,isoRegex:i.slovenian,encoding:"CP1250",utfFrequency:e.slovenian,isoFrequency:e.slovenian},{name:"albanian",count:0,utfRegex:i.albanian,isoRegex:i.albanian,encoding:"CP1250",utfFrequency:e.albanian,isoFrequency:e.albanian},{name:"russian",count:0,utfRegex:new RegExp(/что/,n),isoRegex:new RegExp(/÷òî/,n),encoding:"CP1251",utfFrequency:{low:.004965,high:.005341},isoFrequency:{low:.003884,high:.003986}},{name:"ukrainian",count:0,utfRegex:new RegExp(/він|але/,n),isoRegex:new RegExp(/â³í|àëå/,n),encoding:"CP1251",utfFrequency:e.ukrainian,isoFrequency:e.ukrainian},{name:"bulgarian",count:0,utfRegex:new RegExp(/това|какво/,n),isoRegex:new RegExp(/òîâà|äîáðå|êaêâo/,n),encoding:"CP1251",utfFrequency:{low:.005225,high:.005628},isoFrequency:{low:.002767,high:.004951}},{name:"english",count:0,utfRegex:i.english,isoRegex:i.english,encoding:"CP1252",utfFrequency:e.english,isoFrequency:e.english},{name:"french",count:0,utfRegex:i.french,isoRegex:i.french,encoding:"CP1252",utfFrequency:e.french,isoFrequency:e.french},{name:"portuguese",count:0,utfRegex:i.portuguese,isoRegex:i.portuguese,encoding:"CP1252",utfFrequency:e.portuguese,isoFrequency:e.portuguese},{name:"spanish",count:0,utfRegex:i.spanish,isoRegex:i.spanish,encoding:"CP1252",utfFrequency:e.spanish,isoFrequency:e.spanish},{name:"german",count:0,utfRegex:i.german,isoRegex:i.german,encoding:"CP1252",utfFrequency:e.german,isoFrequency:e.german},{name:"italian",count:0,utfRegex:i.italian,isoRegex:i.italian,encoding:"CP1252",utfFrequency:e.italian,isoFrequency:e.italian},{name:"danish",count:0,utfRegex:i.danish,isoRegex:i.danish,encoding:"CP1252",utfFrequency:e.danish,isoFrequency:e.danish},{name:"norwegian",count:0,utfRegex:i.norwegian,isoRegex:i.norwegian,encoding:"CP1252",utfFrequency:e.norwegian,isoFrequency:e.norwegian},{name:"swedish",count:0,utfRegex:i.swedish,isoRegex:i.swedish,encoding:"CP1252",utfFrequency:e.swedish,isoFrequency:e.swedish},{name:"dutch",count:0,utfRegex:i.dutch,isoRegex:i.dutch,encoding:"CP1252",utfFrequency:e.dutch,isoFrequency:e.dutch},{name:"finnish",count:0,utfRegex:i.finnish,isoRegex:i.finnish,encoding:"CP1252",utfFrequency:e.finnish,isoFrequency:e.finnish},{name:"serbo-croatian",count:0,utfRegex:i["serbo-croatian"],isoRegex:i["serbo-croatian"],encoding:"CP1252",utfFrequency:e["serbo-croatian"],isoFrequency:e["serbo-croatian"]},{name:"estonian",count:0,utfRegex:i.estonian,isoRegex:i.estonian,encoding:"CP1252",utfFrequency:e.estonian,isoFrequency:e.estonian},{name:"icelandic",count:0,utfRegex:i.icelandic,isoRegex:i.icelandic,encoding:"CP1252",utfFrequency:e.icelandic,isoFrequency:e.icelandic},{name:"malay-indonesian",count:0,utfRegex:i["malay-indonesian"],isoRegex:i["malay-indonesian"],encoding:"CP1252",utfFrequency:e["malay-indonesian"],isoFrequency:e["malay-indonesian"]},{name:"greek",count:0,utfRegex:new RegExp(/είναι/,n),isoRegex:new RegExp(/åßíáé/,n),encoding:"CP1253",utfFrequency:e.greek,isoFrequency:e.greek},{name:"turkish",count:0,utfRegex:i.turkish,isoRegex:i.turkish,encoding:"CP1254",utfFrequency:e.turkish,isoFrequency:e.turkish},{name:"hebrew",count:0,utfRegex:new RegExp(/אתה/,n),isoRegex:new RegExp(/àúä/,n),encoding:"CP1255",utfFrequency:e.hebrew,isoFrequency:e.hebrew},{name:"arabic",count:0,utfRegex:new RegExp(/هذا/,n),isoRegex:new RegExp(/åðç/,n),encoding:"CP1256",utfFrequency:{low:.003522,high:.004348},isoFrequency:{low:.003773,high:.005559}},{name:"farsi-persian",count:0,utfRegex:new RegExp(/اون/,n),isoRegex:new RegExp(/çíä/,n),encoding:"CP1256",utfFrequency:{low:.002761,high:.004856},isoFrequency:{low:.00301,high:.006646}},{name:"lithuanian",count:0,utfRegex:i.lithuanian,isoRegex:i.lithuanian,encoding:"CP1257",utfFrequency:e.lithuanian,isoFrequency:e.lithuanian},{name:"chinese-simplified",count:0,utfRegex:new RegExp(/么/,n),isoRegex:new RegExp(/´ó|¶¯|Å®/,n),encoding:"GB18030",utfFrequency:{low:.009567,high:.011502},isoFrequency:{low:.003137,high:.005009}},{name:"chinese-traditional",count:0,utfRegex:new RegExp(/們/,n),isoRegex:new RegExp(/¦b/,n),encoding:"BIG5",utfFrequency:{low:.012484,high:.014964},isoFrequency:{low:.005063,high:.005822}},{name:"japanese",count:0,utfRegex:new RegExp(/ど/,n),isoRegex:new RegExp(/‚»|ÁÄ/,n),encoding:"Shift-JIS",utfFrequency:{low:.004257,high:.006585},isoFrequency:{low:.004286,high:.004653}},{name:"korean",count:0,utfRegex:new RegExp(/도/,n),isoRegex:new RegExp(/àö¾î|å¾ß|¡¼­/,n),encoding:"EUC-KR",utfFrequency:{low:.01091,high:.01367},isoFrequency:{low:.004118,high:.004961}},{name:"thai",count:0,utfRegex:new RegExp(/แฮร์รี่|พอตเตอร์/,n),isoRegex:new RegExp(/áîãìãõè|¾íµàµíãì­/,n),encoding:"TIS-620",utfFrequency:{low:.003194,high:.003468},isoFrequency:{low:.002091,high:.002303}},{name:"bengali",count:0,utfRegex:i.bengali,isoRegex:i.bengali,utfFrequency:e.bengali,isoFrequency:e.bengali},{name:"hindi",count:0,utfRegex:i.hindi,isoRegex:i.hindi,utfFrequency:e.hindi,isoFrequency:e.hindi},{name:"urdu",count:0,utfRegex:i.urdu,isoRegex:i.urdu,utfFrequency:e.urdu,isoFrequency:e.urdu},{name:"vietnamese",count:0,utfRegex:i.vietnamese,isoRegex:i.vietnamese,utfFrequency:e.vietnamese,isoFrequency:e.vietnamese}];const P=C;var v=(u,o)=>{const a=[];P.forEach(g=>{const c={};Object.keys(g).forEach(h=>{h!=="count"?c[h]=g[h]:c.count=0}),a.push(c)});const r=o?"utfRegex":"isoRegex";return a.forEach(g=>{if(g[r]){const c=u.content.match(g[r]);c&&(g.count=c.length)}}),a},O=(u,o)=>{const a=new RegExp(/\d|\n|\s|\-|\.|\,|\:|\;|\?|\!|\<|\>|\[|\]|\{|\}|\&|\=|\|/,"g"),r=u.content.replace(a,"").length,g=u.languageArr,c=u.pos,h=g.reduce((R,f)=>R.name===o.language?f:f.name===o.language||R.count>=f.count?R:f),d=g[c].count/(h.count+g[c].count),t=g[c].count/r;let s=null,l=null;const x=.8;o.encoding==="UTF-8"||o.encoding==="UTF-16LE"?(s=g[c].utfFrequency?g[c].utfFrequency.low*x:null,l=g[c].utfFrequency?(g[c].utfFrequency.low+g[c].utfFrequency.high)/2:null):(s=g[c].isoFrequency?g[c].isoFrequency.low*x:null,l=g[c].isoFrequency?(g[c].isoFrequency.low+g[c].isoFrequency.high)/2:null);let w;if(!s||!l)w=null;else if(t>=l)w=1;else if(t>s){const R=l-s,m=(t-s)/R,q=(1-d)*m;w=Number((d+q).toFixed(2))}else w=Number((d*(t/s)).toFixed(2));return w},y=[{encoding:"UTF-EBCDIC",regex:new RegExp("221 115 102 115")},{encoding:"GB-18030",regex:new RegExp("132 49 149 51")},{encoding:"UTF-32LE",regex:new RegExp("255 254 0 0")},{encoding:"UTF-32BE",regex:new RegExp("0 0 254 255")},{encoding:"UTF-8",regex:new RegExp("239 187 191")},{encoding:"UTF-7",regex:new RegExp("43 47 118")},{encoding:"UTF-1",regex:new RegExp("247 100 76")},{encoding:"SCSU",regex:new RegExp("14 254 255")},{encoding:"BOCU-1",regex:new RegExp("251 238 40")},{encoding:"UTF-16BE",regex:new RegExp("254 255")},{encoding:"UTF-16LE",regex:new RegExp("255 254")}];const A=v,T=O,U=y;var j=(u,o)=>{u.languageArr=A(u,o.encoding),o.language=u.languageArr.reduce((r,g)=>r.count>g.count?r:g).name,u.pos=u.languageArr.findIndex(r=>r.name===o.language),o.encoding||(o.encoding=u.languageArr[u.pos].encoding);const a=T(u,o);return o.confidence.encoding||(o.confidence.encoding=a),o.confidence.language=a,u.languageArr[u.pos].count||(o.language=null,o.confidence.language=null,U.some(r=>r.encoding===o.encoding)||(o.encoding=null,o.confidence.encoding=null)),o};const B=y;var S=u=>{for(const o of B)if(o.regex.test(u))return o.encoding;return null};const M=k,p=j,z=S;var F=u=>new Promise((o,a)=>{const r={encoding:null,language:null,confidence:{encoding:null,language:null}},g={},c=new FileReader;c.onload=()=>{const h=new Uint8Array(c.result).slice(0,4).join(" "),d=z(h);if(d){r.encoding=d,r.confidence.encoding=1;const t=new FileReader;t.onload=()=>{g.content=t.result,o(p(g,r))},t.onerror=s=>{a(s)},t.readAsText(u,r.encoding)}else{const t=new FileReader;t.onload=()=>{const s=t.result,l=M(s);if(l&&(r.encoding="UTF-8",r.confidence.encoding=1),l)g.content=s,o(p(g,r));else{const x=new FileReader;x.onload=()=>{g.content=x.result,o(p(g,r))},x.readAsText(u,"ISO-8859-1")}},t.onerror=s=>{a(s)},t.readAsText(u,"UTF-8")}},c.onerror=h=>{a(h)},c.readAsArrayBuffer(u)});const L=E(F),_=b({__proto__:null,default:L},[F]);export{_ as i};
